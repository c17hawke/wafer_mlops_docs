{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WAFER ML-OPS docs Prerequisites For the overview of the Wafer project refer this video - For mlflow overview refer -","title":"Home"},{"location":"#wafer-ml-ops-docs","text":"","title":"WAFER ML-OPS docs"},{"location":"#prerequisites","text":"","title":"Prerequisites"},{"location":"#for-the-overview-of-the-wafer-project-refer-this-video-","text":"","title":"For the overview of the Wafer project refer this video -"},{"location":"#for-mlflow-overview-refer-","text":"","title":"For mlflow overview refer -"},{"location":"project/","text":"Problem Statement The inputs of various sensors for different wafers have been provided. In electronics, a wafer (also called a slice or substrate) is a thin slice of semiconductor used for the fabrication of integrated circuits. The goal is to build a machine learning model which predicts whether a wafer needs to be replaced or not(i.e., whether it is working or not) based on the inputs from various sensors. There are two classes: +1 and -1. Workflow Data Description The client will send data in multiple sets of files in batches at a given location. Data will contain Wafer names and 590 columns of different sensor values for each wafer. The last column will have the \"Good/Bad\" value for each wafer. \"Good/Bad\" column will have two unique values +1 and -1. \"+1\" represents Bad wafer. \"-1\" represents Good Wafer. Apart from training files, we also require a \"schema\" file from the client, which contains all the relevant information about the training files such as: Name of the files, Length of Date value in FileName, Length of Time value in FileName, Number of Columns, Name of the Columns, and their datatype. Data Validation In this step, we perform different sets of validation on the given set of training files. Name Validation - We validate the name of the files based on the given name in the schema file. We have created a regex pattern as per the name given in the schema file to use for validation. After validating the pattern in the name, we check for the length of date in the file name as well as the length of time in the file name. If all the values are as per requirement, we move such files to \"Good_Data_Folder\" else we move such files to \"Bad_Data_Folder.\" Number of Columns - We validate the number of columns present in the files, and if it doesn't match with the value given in the schema file, then the file is moved to \"Bad_Data_Folder.\" Name of Columns - The name of the columns is validated and should be the same as given in the schema file. If not, then the file is moved to \"Bad_Data_Folder\". The datatype of columns - The datatype of columns is given in the schema file. This is validated when we insert the files into Database. If the datatype is wrong, then the file is moved to \"Bad_Data_Folder\". Null values in columns - If any of the columns in a file have all the values as NULL or missing, we discard such a file and move it to \"Bad_Data_Folder\". Data Insertion in Database Database Creation and connection - Create a database with the given name passed. If the database is already created, open the connection to the database. Table creation in the database - Table with name - \"Good_Data\", is created in the database for inserting the files in the \"Good_Data_Folder\" based on given column names and datatype in the schema file. If the table is already present, then the new table is not created and new files are inserted in the already present table as we want training to be done on new as well as old training files. Insertion of files in the table - All the files in the \"Good_Data_Folder\" are inserted in the above-created table. If any file has invalid data type in any of the columns, the file is not loaded in the table and is moved to \"Bad_Data_Folder\". Model Training Data Export from Db - The data in a stored database is exported as a CSV file to be used for model training. Data Preprocessing Check for null values in the columns. If present, impute the null values using the KNN imputer. Check if any column has zero standard deviation, remove such columns as they don't give any information during model training. Clustering - KMeans algorithm is used to create clusters in the preprocessed data. The optimum number of clusters is selected by plotting the elbow plot, and for the dynamic selection of the number of clusters, we are using \"KneeLocator\" function. The idea behind clustering is to implement different algorithms To train data in different clusters. The Kmeans model is trained over preprocessed data and the model is saved for further use in prediction. Model Selection - After clusters are created, we find the best model for each cluster. We are using two algorithms, \"Random Forest\" and \"XGBoost\". For each cluster, both the algorithms are passed with the best parameters derived from GridSearch. We calculate the AUC scores for both models and select the model with the best score. Similarly, the model is selected for each cluster. All the models for every cluster are saved for use in prediction. Prediction Data Description Client will send the data in multiple set of files in batches at a given location. Data will contain Wafer names and 590 columns of different sensor values for each wafer. Apart from prediction files, we also require a \"schema\" file from client which contains all the relevant information about the training files such as: Name of the files, Length of Date value in FileName, Length of Time value in FileName, Number of Columns, Name of the Columns and their datatype. Data Validation In this step, we perform different sets of validation on the given set of training files. Name Validation - We validate the name of the files on the basis of given Name in the schema file. We have created a regex pattern as per the name given in schema file, to use for validation. After validating the pattern in the name, we check for length of date in the file name as well as length of time in the file name. If all the values are as per requirement, we move such files to \"Good_Data_Folder\" else we move such files to \"Bad_Data_Folder\". Number of Columns - We validate the number of columns present in the files, if it doesn't match with the value given in the schema file then the file is moved to \"Bad_Data_Folder\". Name of Columns - The name of the columns is validated and should be same as given in the schema file. If not, then the file is moved to \"Bad_Data_Folder\". Datatype of columns - The datatype of columns is given in the schema file. This is validated when we insert the files into Database. If dataype is wrong then the file is moved to \"Bad_Data_Folder\". Null values in columns - If any of the columns in a file has all the values as NULL or missing, we discard such file and move it to \"Bad_Data_Folder\". Data Insertion in Database Database Creation and connection - Create database with the given name passed. If the database is already created, open the connection to the database. Table creation in the database - Table with name - \"Good_Data\", is created in the database for inserting the files in the \"Good_Data_Folder\" on the basis of given column names and datatype in the schema file. If table is already present then new table is not created, and new files are inserted the already present table as we want training to be done on new as well old training files. Insertion of files in the table - All the files in the \"Good_Data_Folder\" are inserted in the above-created table. If any file has invalid data type in any of the columns, the file is not loaded in the table and is moved to \"Bad_Data_Folder\". Prediction Data Export from Db - The data in the stored database is exported as a CSV file to be used for prediction. Data Preprocessing Check for null values in the columns. If present, impute the null values using the KNN imputer. Check if any column has zero standard deviation, remove such columns as we did in training. Clustering - KMeans model created during training is loaded, and clusters for the preprocessed prediction data is predicted. Prediction - Based on the cluster number, the respective model is loaded and is used to predict the data for that cluster. Once the prediction is made for all the clusters, the predictions along with the Wafer names are saved in a CSV file at a given location and the location is returned to the client. Deployment","title":"Project"},{"location":"project/#problem-statement","text":"The inputs of various sensors for different wafers have been provided. In electronics, a wafer (also called a slice or substrate) is a thin slice of semiconductor used for the fabrication of integrated circuits. The goal is to build a machine learning model which predicts whether a wafer needs to be replaced or not(i.e., whether it is working or not) based on the inputs from various sensors. There are two classes: +1 and -1.","title":"Problem Statement"},{"location":"project/#workflow","text":"","title":"Workflow"},{"location":"project/#data-description","text":"The client will send data in multiple sets of files in batches at a given location. Data will contain Wafer names and 590 columns of different sensor values for each wafer. The last column will have the \"Good/Bad\" value for each wafer. \"Good/Bad\" column will have two unique values +1 and -1. \"+1\" represents Bad wafer. \"-1\" represents Good Wafer. Apart from training files, we also require a \"schema\" file from the client, which contains all the relevant information about the training files such as: Name of the files, Length of Date value in FileName, Length of Time value in FileName, Number of Columns, Name of the Columns, and their datatype.","title":"Data Description"},{"location":"project/#data-validation","text":"In this step, we perform different sets of validation on the given set of training files. Name Validation - We validate the name of the files based on the given name in the schema file. We have created a regex pattern as per the name given in the schema file to use for validation. After validating the pattern in the name, we check for the length of date in the file name as well as the length of time in the file name. If all the values are as per requirement, we move such files to \"Good_Data_Folder\" else we move such files to \"Bad_Data_Folder.\" Number of Columns - We validate the number of columns present in the files, and if it doesn't match with the value given in the schema file, then the file is moved to \"Bad_Data_Folder.\" Name of Columns - The name of the columns is validated and should be the same as given in the schema file. If not, then the file is moved to \"Bad_Data_Folder\". The datatype of columns - The datatype of columns is given in the schema file. This is validated when we insert the files into Database. If the datatype is wrong, then the file is moved to \"Bad_Data_Folder\". Null values in columns - If any of the columns in a file have all the values as NULL or missing, we discard such a file and move it to \"Bad_Data_Folder\".","title":"Data Validation"},{"location":"project/#data-insertion-in-database","text":"Database Creation and connection - Create a database with the given name passed. If the database is already created, open the connection to the database. Table creation in the database - Table with name - \"Good_Data\", is created in the database for inserting the files in the \"Good_Data_Folder\" based on given column names and datatype in the schema file. If the table is already present, then the new table is not created and new files are inserted in the already present table as we want training to be done on new as well as old training files. Insertion of files in the table - All the files in the \"Good_Data_Folder\" are inserted in the above-created table. If any file has invalid data type in any of the columns, the file is not loaded in the table and is moved to \"Bad_Data_Folder\".","title":"Data Insertion in Database"},{"location":"project/#model-training","text":"Data Export from Db - The data in a stored database is exported as a CSV file to be used for model training. Data Preprocessing Check for null values in the columns. If present, impute the null values using the KNN imputer. Check if any column has zero standard deviation, remove such columns as they don't give any information during model training. Clustering - KMeans algorithm is used to create clusters in the preprocessed data. The optimum number of clusters is selected by plotting the elbow plot, and for the dynamic selection of the number of clusters, we are using \"KneeLocator\" function. The idea behind clustering is to implement different algorithms To train data in different clusters. The Kmeans model is trained over preprocessed data and the model is saved for further use in prediction. Model Selection - After clusters are created, we find the best model for each cluster. We are using two algorithms, \"Random Forest\" and \"XGBoost\". For each cluster, both the algorithms are passed with the best parameters derived from GridSearch. We calculate the AUC scores for both models and select the model with the best score. Similarly, the model is selected for each cluster. All the models for every cluster are saved for use in prediction.","title":"Model Training"},{"location":"project/#prediction-data-description","text":"Client will send the data in multiple set of files in batches at a given location. Data will contain Wafer names and 590 columns of different sensor values for each wafer. Apart from prediction files, we also require a \"schema\" file from client which contains all the relevant information about the training files such as: Name of the files, Length of Date value in FileName, Length of Time value in FileName, Number of Columns, Name of the Columns and their datatype.","title":"Prediction Data Description"},{"location":"project/#data-validation_1","text":"In this step, we perform different sets of validation on the given set of training files. Name Validation - We validate the name of the files on the basis of given Name in the schema file. We have created a regex pattern as per the name given in schema file, to use for validation. After validating the pattern in the name, we check for length of date in the file name as well as length of time in the file name. If all the values are as per requirement, we move such files to \"Good_Data_Folder\" else we move such files to \"Bad_Data_Folder\". Number of Columns - We validate the number of columns present in the files, if it doesn't match with the value given in the schema file then the file is moved to \"Bad_Data_Folder\". Name of Columns - The name of the columns is validated and should be same as given in the schema file. If not, then the file is moved to \"Bad_Data_Folder\". Datatype of columns - The datatype of columns is given in the schema file. This is validated when we insert the files into Database. If dataype is wrong then the file is moved to \"Bad_Data_Folder\". Null values in columns - If any of the columns in a file has all the values as NULL or missing, we discard such file and move it to \"Bad_Data_Folder\".","title":"Data Validation"},{"location":"project/#data-insertion-in-database_1","text":"Database Creation and connection - Create database with the given name passed. If the database is already created, open the connection to the database. Table creation in the database - Table with name - \"Good_Data\", is created in the database for inserting the files in the \"Good_Data_Folder\" on the basis of given column names and datatype in the schema file. If table is already present then new table is not created, and new files are inserted the already present table as we want training to be done on new as well old training files. Insertion of files in the table - All the files in the \"Good_Data_Folder\" are inserted in the above-created table. If any file has invalid data type in any of the columns, the file is not loaded in the table and is moved to \"Bad_Data_Folder\".","title":"Data Insertion in Database"},{"location":"project/#prediction","text":"Data Export from Db - The data in the stored database is exported as a CSV file to be used for prediction. Data Preprocessing Check for null values in the columns. If present, impute the null values using the KNN imputer. Check if any column has zero standard deviation, remove such columns as we did in training. Clustering - KMeans model created during training is loaded, and clusters for the preprocessed prediction data is predicted. Prediction - Based on the cluster number, the respective model is loaded and is used to predict the data for that cluster. Once the prediction is made for all the clusters, the predictions along with the Wafer names are saved in a CSV file at a given location and the location is returned to the client.","title":"Prediction"},{"location":"project/#deployment","text":"","title":"Deployment"},{"location":"reference/","text":"Important references - 1. MLflow Documentation Visit site 2. DVC Documentation Visit site 3. Cookiecutter Data Science documentation Visit site 4. MLOps: Continuous delivery and automation pipelines in machine learnings Visit site 5. Python logging module Visit site","title":"Reference"},{"location":"reference/#important-references-","text":"","title":"Important references -"},{"location":"reference/#1-mlflow-documentation","text":"Visit site","title":"1. MLflow Documentation"},{"location":"reference/#2-dvc-documentation","text":"Visit site","title":"2. DVC Documentation"},{"location":"reference/#3-cookiecutter-data-science-documentation","text":"Visit site","title":"3. Cookiecutter Data Science documentation"},{"location":"reference/#4-mlops-continuous-delivery-and-automation-pipelines-in-machine-learnings","text":"Visit site","title":"4. MLOps: Continuous delivery and automation pipelines in machine learnings"},{"location":"reference/#5-python-logging-module","text":"Visit site","title":"5. Python logging module"},{"location":"stage1_init_setup/","text":"Stage 1: Data preparation (Day 1: Initial setup) Main repository link: On top right corner next to the search bar link for the main repo is given or click here to see the main repo Note The main repo contains various branch so make sure you select a branch which has the latest commit to see the recent updates. Steps and important commands to begin- Note Replace the text mentioned as <some_txt> with your preferred choice. STEP 1 Create a new conda environment Open an anaconda prompt and create an environment - conda create -n <your_env_name> python = 3 .7 -y Activate the environment - conda activate <your_env_name> STEP 2 Create a default structure Install cookiecutter template pip install cookiecutter Start a new project cookiecutter https://github.com/drivendata/cookiecutter-data-science After above step you'll be given options in the command line. project_name: repo_name: author_name: description: Select open_source_license: s3_bucket [Optional] : Select python_interpreter: Once you are done with above step you'll see a following directory structure inside a directory by your given project_name Click to see Project Organization \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile <- Makefile with commands like `make data` or `make train` \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 external <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u251c\u2500\u2500 docs <- A default Sphinx project; see sphinx-doc.org for details \u2502 \u251c\u2500\u2500 models <- Trained and serialized models, model predictions, or model summaries \u2502 \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u2502 \u251c\u2500\u2500 reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500 figures <- Generated graphics and figures to be used in reporting \u2502 \u251c\u2500\u2500 requirements.txt <- The requirements file for reproducing the analysis environment, e.g. \u2502 generated with `pip freeze > requirements.txt` \u2502 \u251c\u2500\u2500 setup.py <- makes project pip installable (pip install -e .) so src can be imported \u251c\u2500\u2500 src <- Source code for use in this project. \u2502 \u251c\u2500\u2500 __init__.py <- Makes src a Python module \u2502 \u2502 \u2502 \u251c\u2500\u2500 data <- Scripts to download or generate data \u2502 \u2502 \u2514\u2500\u2500 make_dataset.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 features <- Scripts to turn raw data into features for modeling \u2502 \u2502 \u2514\u2500\u2500 build_features.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 models <- Scripts to train models and then use trained models to make \u2502 \u2502 \u2502 predictions \u2502 \u2502 \u251c\u2500\u2500 predict_model.py \u2502 \u2502 \u2514\u2500\u2500 train_model.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 visualization <- Scripts to create exploratory and results oriented visualizations \u2502 \u2514\u2500\u2500 visualize.py \u2502 \u2514\u2500\u2500 tox.ini <- tox file with settings for running tox; see tox.readthedocs.io Now open the project in your favorite code editor. STEP 3 Get the dataset Clone it from the dataset repository or directly- Download Dataset Now extract the Prediction_Batch_files , Training_Batch_Files directory in the root directory of the project STEP 4 Initialize git in Current working directory in your terminal, command prompt or git bash. git init Note If git is not installed in your system then download it from GIT-SCM site STEP 5 Install DVC and its gdrive extension pip install dvc pip install dvc [ gdrive ] STEP 6 Initialize DVC dvc init STEP 7 Add data into dvc for tracking dvc add Training_Batch_Files/*.csv Prediction_Batch_files/*.csv Warning Above command will not work for windows users so they can create and run the following file in the root of their project # NOTE: For windows user- # This file must be created in the root of the project # where Training and Prediction batch file as are present import os from glob import glob data_dirs = [ \"Training_Batch_Files\" , \"Prediction_Batch_files\" ] for data_dir in data_dirs : files = glob ( data_dir + r \"/*.csv\" ) for filePath in files : # print(f\"dvc add {filePath}\") os . system ( f \"dvc add { filePath } \" ) print ( \" \\n #### all files added to dvc ####\" ) STEP 8 Do the first commit and push to the remote repository run below commands on by one - git add . && git commit -m \"first commit and added raw data\" git branch -M main git remote add origin https://github.com/<USERNAME>/<REPONAME>.git git push -u origin main Note replace <USERNAME> and <REPONAME> as per you. STEP 9 Create and checkout a development branch for our development git checkout -b dev STEP 10 Add remote storage dvc remote add -d storage gdrive://<DRIVE ID> git add .dvc/config && git commit -m \"Configure remote storage\" Note Get the as shown in the highlighted part in the below screenshot- STEP 11 Push the data to the remote storage- dvc push This step will ask you to authenticate yourself by clicking on the link which will appear in the terminal. Once you allow dvc to read and write on gdrive it'll give an access token which you'll paste in the terminal. Now the copy of your data will be pushed to the gdrive Above step will create a gdrive credential file (Now check next step). STEP 12 Add Gdrive credential secrets in github repo secrets. Find this credentials in the given path - .dvc >> temp >> gdrive-user-credentials.json Now to add the secrets in your github repo - Go to settings secrets Click on add secrets Give name of secretes Paste the json file content from gdrive-user-credentials.json To retrieve data anytime dvc pull refer dvc-data-versioning to know more STEP 13 Install full requirements.txt as given in the repository pip install -r requirements.txt One line readme update and push command to dev branch- git add README.md && git commit -m \"update readme\" && git push origin dev STEP 14 Now you can follow along after this point as shown in the following video -","title":"Pipeline Stage 1 (Initial setup)"},{"location":"stage1_init_setup/#stage-1-data-preparation-day-1-initial-setup","text":"","title":"Stage 1: Data preparation (Day 1: Initial setup)"},{"location":"stage1_init_setup/#main-repository-link","text":"On top right corner next to the search bar link for the main repo is given or click here to see the main repo Note The main repo contains various branch so make sure you select a branch which has the latest commit to see the recent updates.","title":"Main repository link:"},{"location":"stage1_init_setup/#steps-and-important-commands-to-begin-","text":"Note Replace the text mentioned as <some_txt> with your preferred choice.","title":"Steps and important commands to begin-"},{"location":"stage1_init_setup/#step-1-create-a-new-conda-environment","text":"Open an anaconda prompt and create an environment - conda create -n <your_env_name> python = 3 .7 -y Activate the environment - conda activate <your_env_name>","title":"STEP 1 Create a new conda environment"},{"location":"stage1_init_setup/#step-2-create-a-default-structure","text":"Install cookiecutter template pip install cookiecutter Start a new project cookiecutter https://github.com/drivendata/cookiecutter-data-science After above step you'll be given options in the command line. project_name: repo_name: author_name: description: Select open_source_license: s3_bucket [Optional] : Select python_interpreter: Once you are done with above step you'll see a following directory structure inside a directory by your given project_name Click to see Project Organization \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile <- Makefile with commands like `make data` or `make train` \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 external <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u251c\u2500\u2500 docs <- A default Sphinx project; see sphinx-doc.org for details \u2502 \u251c\u2500\u2500 models <- Trained and serialized models, model predictions, or model summaries \u2502 \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u2502 \u251c\u2500\u2500 reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500 figures <- Generated graphics and figures to be used in reporting \u2502 \u251c\u2500\u2500 requirements.txt <- The requirements file for reproducing the analysis environment, e.g. \u2502 generated with `pip freeze > requirements.txt` \u2502 \u251c\u2500\u2500 setup.py <- makes project pip installable (pip install -e .) so src can be imported \u251c\u2500\u2500 src <- Source code for use in this project. \u2502 \u251c\u2500\u2500 __init__.py <- Makes src a Python module \u2502 \u2502 \u2502 \u251c\u2500\u2500 data <- Scripts to download or generate data \u2502 \u2502 \u2514\u2500\u2500 make_dataset.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 features <- Scripts to turn raw data into features for modeling \u2502 \u2502 \u2514\u2500\u2500 build_features.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 models <- Scripts to train models and then use trained models to make \u2502 \u2502 \u2502 predictions \u2502 \u2502 \u251c\u2500\u2500 predict_model.py \u2502 \u2502 \u2514\u2500\u2500 train_model.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 visualization <- Scripts to create exploratory and results oriented visualizations \u2502 \u2514\u2500\u2500 visualize.py \u2502 \u2514\u2500\u2500 tox.ini <- tox file with settings for running tox; see tox.readthedocs.io Now open the project in your favorite code editor.","title":"STEP 2 Create a default structure"},{"location":"stage1_init_setup/#step-3-get-the-dataset","text":"Clone it from the dataset repository or directly- Download Dataset Now extract the Prediction_Batch_files , Training_Batch_Files directory in the root directory of the project","title":"STEP 3 Get the dataset"},{"location":"stage1_init_setup/#step-4-initialize-git-in-current-working-directory-in-your-terminal-command-prompt-or-git-bash","text":"git init Note If git is not installed in your system then download it from GIT-SCM site","title":"STEP 4 Initialize git in Current working directory in your terminal, command prompt or git bash."},{"location":"stage1_init_setup/#step-5-install-dvc-and-its-gdrive-extension","text":"pip install dvc pip install dvc [ gdrive ]","title":"STEP 5 Install DVC and its gdrive extension"},{"location":"stage1_init_setup/#step-6-initialize-dvc","text":"dvc init","title":"STEP 6 Initialize DVC"},{"location":"stage1_init_setup/#step-7-add-data-into-dvc-for-tracking","text":"dvc add Training_Batch_Files/*.csv Prediction_Batch_files/*.csv Warning Above command will not work for windows users so they can create and run the following file in the root of their project # NOTE: For windows user- # This file must be created in the root of the project # where Training and Prediction batch file as are present import os from glob import glob data_dirs = [ \"Training_Batch_Files\" , \"Prediction_Batch_files\" ] for data_dir in data_dirs : files = glob ( data_dir + r \"/*.csv\" ) for filePath in files : # print(f\"dvc add {filePath}\") os . system ( f \"dvc add { filePath } \" ) print ( \" \\n #### all files added to dvc ####\" )","title":"STEP 7 Add data into dvc for tracking"},{"location":"stage1_init_setup/#step-8-do-the-first-commit-and-push-to-the-remote-repository","text":"run below commands on by one - git add . && git commit -m \"first commit and added raw data\" git branch -M main git remote add origin https://github.com/<USERNAME>/<REPONAME>.git git push -u origin main Note replace <USERNAME> and <REPONAME> as per you.","title":"STEP 8 Do the first commit and push to the remote repository"},{"location":"stage1_init_setup/#step-9-create-and-checkout-a-development-branch-for-our-development","text":"git checkout -b dev","title":"STEP 9 Create and checkout a development branch for our development"},{"location":"stage1_init_setup/#step-10-add-remote-storage","text":"dvc remote add -d storage gdrive://<DRIVE ID> git add .dvc/config && git commit -m \"Configure remote storage\" Note Get the as shown in the highlighted part in the below screenshot-","title":"STEP 10 Add remote storage"},{"location":"stage1_init_setup/#step-11-push-the-data-to-the-remote-storage-","text":"dvc push This step will ask you to authenticate yourself by clicking on the link which will appear in the terminal. Once you allow dvc to read and write on gdrive it'll give an access token which you'll paste in the terminal. Now the copy of your data will be pushed to the gdrive Above step will create a gdrive credential file (Now check next step).","title":"STEP 11 Push the data to the remote storage-"},{"location":"stage1_init_setup/#step-12-add-gdrive-credential-secrets-in-github-repo-secrets","text":"Find this credentials in the given path - .dvc >> temp >> gdrive-user-credentials.json Now to add the secrets in your github repo - Go to settings secrets Click on add secrets Give name of secretes Paste the json file content from gdrive-user-credentials.json To retrieve data anytime dvc pull refer dvc-data-versioning to know more","title":"STEP 12 Add Gdrive credential secrets in github repo secrets."},{"location":"stage1_init_setup/#step-13-install-full-requirementstxt-as-given-in-the-repository","text":"pip install -r requirements.txt One line readme update and push command to dev branch- git add README.md && git commit -m \"update readme\" && git push origin dev","title":"STEP 13 Install full requirements.txt as given in the repository"},{"location":"stage1_init_setup/#step-14-now-you-can-follow-along-after-this-point-as-shown-in-the-following-video-","text":"","title":"STEP 14 Now you can follow along after this point as shown in the following video -"}]}